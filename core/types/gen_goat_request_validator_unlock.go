// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*validatorUnlockMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (v ValidatorUnlock) MarshalJSON() ([]byte, error) {
	type ValidatorUnlock struct {
		Id        hexutil.Uint64 `json:"id"`
		Validator common.Address `json:"validator"`
		Token     common.Address `json:"token"`
		Recipient common.Address `json:"recipient"`
		Amount    *hexutil.Big   `json:"amount"`
	}
	var enc ValidatorUnlock
	enc.Id = hexutil.Uint64(v.Id)
	enc.Validator = v.Validator
	enc.Token = v.Token
	enc.Recipient = v.Recipient
	enc.Amount = (*hexutil.Big)(v.Amount)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *ValidatorUnlock) UnmarshalJSON(input []byte) error {
	type ValidatorUnlock struct {
		Id        *hexutil.Uint64 `json:"id"`
		Validator *common.Address `json:"validator"`
		Token     *common.Address `json:"token"`
		Recipient *common.Address `json:"recipient"`
		Amount    *hexutil.Big    `json:"amount"`
	}
	var dec ValidatorUnlock
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id != nil {
		v.Id = uint64(*dec.Id)
	}
	if dec.Validator != nil {
		v.Validator = *dec.Validator
	}
	if dec.Token != nil {
		v.Token = *dec.Token
	}
	if dec.Recipient != nil {
		v.Recipient = *dec.Recipient
	}
	if dec.Amount != nil {
		v.Amount = (*big.Int)(dec.Amount)
	}
	return nil
}
