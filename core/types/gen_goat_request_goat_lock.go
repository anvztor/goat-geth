// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*goatLockMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g GoatLock) MarshalJSON() ([]byte, error) {
	type GoatLock struct {
		Validator common.Address `json:"validator"`
		Token     common.Address `json:"token"`
		Amount    *hexutil.Big   `json:"amount"`
	}
	var enc GoatLock
	enc.Validator = g.Validator
	enc.Token = g.Token
	enc.Amount = (*hexutil.Big)(g.Amount)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GoatLock) UnmarshalJSON(input []byte) error {
	type GoatLock struct {
		Validator *common.Address `json:"validator"`
		Token     *common.Address `json:"token"`
		Amount    *hexutil.Big    `json:"amount"`
	}
	var dec GoatLock
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Validator != nil {
		g.Validator = *dec.Validator
	}
	if dec.Token != nil {
		g.Token = *dec.Token
	}
	if dec.Amount != nil {
		g.Amount = (*big.Int)(dec.Amount)
	}
	return nil
}
