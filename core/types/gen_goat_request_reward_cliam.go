// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*goatRewardClaimMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g GoatRewardClaim) MarshalJSON() ([]byte, error) {
	type GoatRewardClaim struct {
		Id        hexutil.Uint64 `json:"id"`
		Validator common.Address `json:"validator"`
		Recipient common.Address `json:"recipient"`
	}
	var enc GoatRewardClaim
	enc.Id = hexutil.Uint64(g.Id)
	enc.Validator = g.Validator
	enc.Recipient = g.Recipient
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GoatRewardClaim) UnmarshalJSON(input []byte) error {
	type GoatRewardClaim struct {
		Id        *hexutil.Uint64 `json:"id"`
		Validator *common.Address `json:"validator"`
		Recipient *common.Address `json:"recipient"`
	}
	var dec GoatRewardClaim
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id != nil {
		g.Id = uint64(*dec.Id)
	}
	if dec.Validator != nil {
		g.Validator = *dec.Validator
	}
	if dec.Recipient != nil {
		g.Recipient = *dec.Recipient
	}
	return nil
}
