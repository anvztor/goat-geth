// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*updateTokenThresholdMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (u UpdateTokenThreshold) MarshalJSON() ([]byte, error) {
	type UpdateTokenThreshold struct {
		Token     common.Address `json:"token"`
		Threshold *hexutil.Big   `json:"threshold"`
	}
	var enc UpdateTokenThreshold
	enc.Token = u.Token
	enc.Threshold = (*hexutil.Big)(u.Threshold)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (u *UpdateTokenThreshold) UnmarshalJSON(input []byte) error {
	type UpdateTokenThreshold struct {
		Token     *common.Address `json:"token"`
		Threshold *hexutil.Big    `json:"threshold"`
	}
	var dec UpdateTokenThreshold
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Token != nil {
		u.Token = *dec.Token
	}
	if dec.Threshold != nil {
		u.Threshold = (*big.Int)(dec.Threshold)
	}
	return nil
}
